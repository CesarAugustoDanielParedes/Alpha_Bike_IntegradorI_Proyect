// Funci√≥n para mostrar/ocultar contrase√±a (YA EXISTENTE)
function togglePassword(id, el) {
    const input = document.getElementById(id);
    if (input.type === "password") {
        input.type = "text";
        el.textContent = "üôà";
    } else {
        input.type = "password";
        el.textContent = "üëÅÔ∏è";
    }
}

// ----------------------------------------------------
// L√ìGICA DE INICIO DE SESI√ìN CON JWT
// ----------------------------------------------------

document.addEventListener('DOMContentLoaded', () => {
    // 1. Identificar el formulario y sus inputs
    const form = document.querySelector('.auth-form'); 
    // Aseg√∫rate de dar ID a los inputs para f√°cil acceso
    const emailInput = form.querySelector('input[type="email"]');
    const passwordInput = document.getElementById('login-password'); // Ya tiene ID

    form.addEventListener('submit', async (e) => {
        e.preventDefault();

        const correo = emailInput.value.trim();
        const contrasena = passwordInput.value.trim();

        if (!correo || !contrasena) {
            alert('Por favor, ingresa tu correo y contrase√±a.');
            return;
        }

        try {
            // Llama a tu endpoint de login en Node.js
            const res = await fetch('http://localhost:3000/api/login', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ correo, contrasena })
            });

            const data = await res.json();
            
            if (res.status !== 200) {
                // Manejar error de autenticaci√≥n (ej: 401 Unauthorized)
                alert(data.error || 'Credenciales incorrectas.');
                return;
            }

            // √âXITO: Recibir el Token y Rol
            const { token, usuario } = data; // Esperamos recibir el token y la info del usuario/rol
            
            // 2. Almacenar el JWT y los datos del usuario para mantener la sesi√≥n
            localStorage.setItem('authToken', token);
            localStorage.setItem('userName', usuario.nombre || 'Cliente');
            localStorage.setItem('userRole', usuario.rol); // Rol es crucial para la redirecci√≥n

            alert('¬°Inicio de sesi√≥n exitoso!');

            // 3. Redirecci√≥n basada en el Rol (L√≥gica de acceso al panel)
            if (usuario.rol === 'Administrador') {
                window.location.href = 'admin/panel.html'; // Redirige al Panel de Administrador
            } else {
                window.location.href = 'inicio.html'; // Redirige al inicio (Cliente)
            }

        } catch (err) {
            console.error('Error en la conexi√≥n o el servidor:', err);
            alert('Error al conectar con el servidor. Int√©ntalo de nuevo m√°s tarde.');
        }
    });
});